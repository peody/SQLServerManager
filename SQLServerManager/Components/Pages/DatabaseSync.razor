@page "/dba"
@using DatabaseSynchronizer.Services
@inject DatabaseService DatabaseService
@inject ModelGeneratorService ModelGeneratorService
@inject IConfiguration Configuration
@inject DbContextGenerationService DbContextGenerationService
@using System.Runtime.InteropServices
@inject IJSRuntime JSRuntime

<PageTitle>Database Synchronizer</PageTitle>

<div class="container" style="width : 600px;">
    <h3>Đồng Bộ Cấu Trúc Chủ Động</h3>

    <div class="row">
        <div class="col">
            <label>Chọn Database:</label>
            
            <select class="form-control"
                    @bind="SelectedDatabase">
                    <option>vui long chon database</option>
                @foreach (var db in Databases)
                {
                    <option value="@db">@db</option>
                }
            </select>
        </div>
    </div>

    <div >
        <div >
            <label>Đường dẫn dự án:</label>
            <div class="input-group">
                <div class="form-control text-muted" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                    @(string.IsNullOrEmpty(ProjectPath) ? "Chưa chọn thư mục" : ProjectPath)
                </div>
                <button class="btn btn-secondary" @onclick="BrowseProjectPath">
                    Chọn thư mục
                </button>
            </div>
        </div>
    </div>


    <div >
        <div >
            <label>Namespace Models:</label>
            <input type="text"
                   class="form-control"
                   @bind="ModelNamespace"
                   placeholder="Nhập namespace cho models" />
        </div>
    </div>

    <div >
        <div >
            <div class="form-check">
                <input type="checkbox"
                       class="form-check-input"
                       id="safeModeCheckbox"
                       @bind="SafeMode" />
                <label class="form-check-label" for="safeModeCheckbox">
                    Chế độ an toàn (không xóa models)
                </label>
            </div>
        </div>
    </div>

    

  
    <div>
        <div>
            <div class="form-check">
                <input type="checkbox"
                       class="form-check-input"
                       id="generateDbContextCheckbox"
                       @bind="GenerateDbContext" />
                <label class="form-check-label" for="generateDbContextCheckbox">
                    Sinh DbContext
                </label>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") mt-3">
            @StatusMessage
        </div>

    }
    <div>
        <button class="btn btn-primary"
                @onclick="GenerateModelsAndContext"
                disabled="@IsProcessing">
            @(IsProcessing ? "Đang xử lý..." : "Đồng bộ")
        </button>
    </div>
</div>


@code {
    private List<string> Databases { get; set; } = new List<string>();
    private string SelectedDatabase { get; set; }
    private string ProjectPath { get; set; }
    private string ModelNamespace { get; set; } = "YourProject.Models";
    private bool SafeMode { get; set; } = false; // Thêm thuộc tính SafeMode
    private string StatusMessage { get; set; }
    private bool IsSuccess { get; set; }
    private bool IsProcessing { get; set; } = false;
    private bool GenerateDbContext { get; set; } = false;

    protected override void OnInitialized()
    {
        try
        {
             Databases = DatabaseService.GetDatabases();
            // if (Databases.Any())
            // {
            //     SelectedDatabase = Databases.First();
            // }

           
        }
        catch (Exception ex)
        {
            StatusMessage = $"Lỗi: {ex.Message}";
            IsSuccess = false;
        }
    }
    private async Task BrowseProjectPath()
    {
        // Hiển thị hộp thoại prompt để người dùng nhập đường dẫn thư mục dự án
        var selectedPath = await JSRuntime.InvokeAsync<string>(
            "prompt", // Tên hàm JavaScript được gọi
            "Nhập đường dẫn thư mục dự án:" // Thông điệp hiển thị trong hộp thoại
        );

        // Kiểm tra nếu đường dẫn không rỗng và thư mục tồn tại
        if (!string.IsNullOrEmpty(selectedPath) && Directory.Exists(selectedPath))
        {
            ProjectPath = selectedPath; // Lưu đường dẫn vào biến ProjectPath
            StateHasChanged(); // Cập nhật trạng thái UI
        }
        else
        {
            StatusMessage = "Đường dẫn không hợp lệ"; // Thông báo lỗi nếu đường dẫn không hợp lệ
            IsSuccess = false; // Đánh dấu trạng thái không thành công
        }
    }
    private async Task GenerateModelsAndContext()
    {
        // Kiểm tra nếu không có cơ sở dữ liệu được chọn
        if (string.IsNullOrEmpty(SelectedDatabase))
        {
            StatusMessage = "Vui lòng chọn database"; // Thông báo lỗi
            IsSuccess = false; // Đánh dấu trạng thái không thành công
            return; // Kết thúc phương thức
        }

        // Kiểm tra nếu không có đường dẫn dự án được chọn
        if (string.IsNullOrEmpty(ProjectPath))
        {
            StatusMessage = "Vui lòng chọn đường dẫn dự án"; // Thông báo lỗi
            IsSuccess = false; // Đánh dấu trạng thái không thành công
            return; // Kết thúc phương thức
        }

        IsProcessing = true; // Đánh dấu đang xử lý
        StatusMessage = ""; // Đặt thông báo trạng thái về rỗng

        try
        {
            // Sinh các model
            bool modelResult = await ModelGeneratorService.GenerateModelsAsync(
                SelectedDatabase, // Cơ sở dữ liệu đã chọn
                ProjectPath, // Đường dẫn dự án
                ModelNamespace, // Namespace cho model
                SafeMode); // Chế độ an toàn

            // Kiểm tra kết quả sinh model
            if (!modelResult)
            {
                StatusMessage = "Sinh model thất bại"; // Thông báo lỗi
                IsSuccess = false; // Đánh dấu trạng thái không thành công
                return; // Kết thúc phương thức
            }

            // Sinh DbContext (nếu được chọn)
            bool contextResult = true; // Khởi tạo biến kết quả cho DbContext
            if (GenerateDbContext) // Kiểm tra nếu cần sinh DbContext
            {
                contextResult = await DbContextGenerationService.GenerateDbContextAsync(
                    SelectedDatabase, // Cơ sở dữ liệu đã chọn
                    ProjectPath, // Đường dẫn dự án
                    ModelNamespace.Replace(".Models", ""), // Điều chỉnh namespace
                    SafeMode); // Chế độ an toàn
            }

            // Xác định trạng thái kết quả
            StatusMessage = GenerateDbContext
                ? (contextResult
                    ? "Sinh model và DbContext thành công" // Thông báo thành công
                    : "Sinh model thành công, nhưng DbContext thất bại") // Thông báo một phần thành công
                : "Sinh model thành công"; // Thông báo chỉ sinh model thành công

            IsSuccess = GenerateDbContext ? contextResult : true; // Đánh dấu trạng thái thành công dựa trên kết quả
        }
        catch (Exception ex)
        {
            StatusMessage = $"Lỗi: {ex.Message}"; // Thông báo lỗi nếu có ngoại lệ
            IsSuccess = false; // Đánh dấu trạng thái không thành công
        }
        finally
        {
            IsProcessing = false; // Đánh dấu không còn đang xử lý
            StateHasChanged(); // Cập nhật trạng thái UI
        }
    }


}
