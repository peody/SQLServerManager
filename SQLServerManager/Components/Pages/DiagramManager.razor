@page "/diagram"
@inject IDatabaseService DatabaseService
@inject ITableService TableService
@inject IJSRuntime JSRuntime

<h3>Quản Lý Sơ Đồ</h3>

<!-- Dropdown chọn database -->
<div class="mb-3">
    <label for="databaseSelect">Chọn Cơ Sở Dữ Liệu:</label>

    <select id="databaseSelect" class="form-control" @onchange="OnDatabaseChange">
        <option>vui long chon database</option>

        @foreach (var db in databases)
        {
            <option value="@db">@db</option>
        }
    </select>
</div>

<!-- Danh sách bảng -->
<h4>Danh Sách Bảng</h4>
<div class="table-container">
    @if (tables.Count > 0)
    {
        @foreach (var table in tables)
        {
            <div draggable="true" @ondragstart="(e) => OnDragStart(e, table.Name)" class="table-item">
                @table.Name
                <button class="btn btn-sm btn-info ml-2" @onclick="() => ShowTableDetails(table)">Xem Chi Tiết</button>
            </div>
        }
    }
    else
    {
        <p>Không có bảng nào trong database này.</p>
    }
</div>


<!-- Khu vực sơ đồ -->
<h4>Sơ Đồ</h4>
<button class="btn btn-warning mb-3" @onclick="ExportDiagramAsImage">Xuất Sơ Đồ</button>

<div id="diagramCanvas" class="diagram-canvas">
    <!-- Các bảng sẽ hiển thị tại đây -->
</div>
<!-- Modal chi tiết bảng -->
@if (isTableDetailsVisible)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi Tiết Bảng: @currentTableName</h5>
                    <button type="button" class="close" @onclick="CloseTableDetails">&times;</button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Tên</th>
                                <th>Khóa chính</th>
                                <th>Khóa Ngoại</th>
                                <th>Bảng Liên Kết</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var column in tableColumns)
                            {
                                <tr>
                                    <td>@column.Name</td>
                                    <td>@column.IsPrimaryKey</td>
                                    <td>@column.IsForeignKey</td>
                                    <td>@column.ForeignKeyTable</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseTableDetails">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<string> databases = new(); // Danh sách cơ sở dữ liệu
    private string selectedDatabase; // Cơ sở dữ liệu được chọn
    private List<TableInfo> tables = new(); // Danh sách các bảng trong cơ sở dữ liệu
    private string currentTableName; // Tên bảng hiện tại
    private List<string> currentTableColumns = new(); // Danh sách cột của bảng hiện tại
    private bool isCreateDiagramModalVisible = false; // Hiển thị modal tạo sơ đồ
    private bool isTableDetailsVisible = false; // Hiển thị modal chi tiết bảng
    private string newDiagramName = string.Empty; // Tên sơ đồ mới
    private List<ColumnInfo> tableColumns; // Danh sách các cột của bảng

    protected override async Task OnInitializedAsync() // Phương thức khởi tạo bất đồng bộ
    {
        try
        {
            databases.Add("VUI LONG CHON"); // Thêm chuỗi thông báo vào danh sách cơ sở dữ liệu
            databases = await DatabaseService.GetDatabasesAsync(); // Lấy danh sách cơ sở dữ liệu từ dịch vụ

           // selectedDatabase = databases.FirstOrDefault(); // Chọn cơ sở dữ liệu đầu tiên trong danh sách

            if (!string.IsNullOrEmpty(selectedDatabase)) // Kiểm tra nếu có cơ sở dữ liệu được chọn
            {
                await LoadTablesAsync(); // Tải danh sách các bảng trong cơ sở dữ liệu
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải danh sách cơ sở dữ liệu: {ex.Message}"); // Xử lý lỗi
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) // Phương thức xử lý sau khi giao diện được render
    {
        if (firstRender) // Nếu là lần render đầu tiên
        {
            try
            {
                if (string.IsNullOrEmpty(selectedDatabase))
                {
                    Console.WriteLine("Không có cơ sở dữ liệu nào được chọn.");
                    return;
                }

                tables = await TableService.GetTablesAsync(selectedDatabase); // Lấy danh sách các bảng từ backend
                Console.WriteLine($"Số lượng bảng: {tables.Count}");

                var connections = await GetTableConnections(); // Lấy danh sách các quan hệ giữa các bảng
                Console.WriteLine($"Số lượng quan hệ: {connections.Count}");

                await JSRuntime.InvokeVoidAsync("diagramManager.updateDiagram", tables, connections); // Gửi danh sách bảng và quan hệ sang JavaScript để hiển thị sơ đồ

                Console.WriteLine("Sơ đồ và quan hệ đã được hiển thị.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi khởi tạo sơ đồ: {ex.Message}"); // Xử lý lỗi
            }
        }
    }

    private async Task OnDatabaseChange(ChangeEventArgs e) // Phương thức xử lý khi thay đổi cơ sở dữ liệu
    {
        selectedDatabase = e.Value.ToString(); // Lấy cơ sở dữ liệu mới được chọn

        await LoadTablesAsync(); // Tải lại danh sách bảng khi chọn cơ sở dữ liệu khác

        await ReloadDiagramAsync(); // Tải lại sơ đồ với dữ liệu mới
    }

    private async Task ReloadDiagramAsync() // Phương thức tải lại sơ đồ
    {
        try
        {
            if (string.IsNullOrEmpty(selectedDatabase))
            {
                Console.WriteLine("Không có cơ sở dữ liệu nào được chọn.");
                return;
            }

            tables = await TableService.GetTablesAsync(selectedDatabase); // Lấy danh sách các bảng từ backend

            if (tables == null || !tables.Any())
            {
                Console.WriteLine("Không có bảng nào trong cơ sở dữ liệu này.");
                return;
            }

            var connections = await GetTableConnections(); // Lấy danh sách các quan hệ giữa các bảng

            await JSRuntime.InvokeVoidAsync("diagramManager.updateDiagram", tables, connections); // Gửi danh sách bảng và quan hệ sang JavaScript để vẽ lại sơ đồ

            Console.WriteLine("Sơ đồ đã được tải lại.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải lại sơ đồ: {ex.Message}"); // Xử lý lỗi
        }
    }

    private async Task LoadTablesAsync() // Phương thức tải danh sách các bảng
    {
        if (string.IsNullOrEmpty(selectedDatabase))
        {
            Console.WriteLine("Không có cơ sở dữ liệu nào được chọn.");
            return;
        }

        try
        {
            tables = await TableService.GetTablesAsync(selectedDatabase); // Lấy danh sách các bảng từ backend
            if (tables == null || !tables.Any())
            {
                Console.WriteLine("Không có bảng nào trong cơ sở dữ liệu này.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải danh sách bảng: {ex.Message}"); // Xử lý lỗi
        }
    }

    private void ShowCreateDiagramModal() // Phương thức hiển thị modal tạo sơ đồ
    {
        isCreateDiagramModalVisible = true;
    }

    private void CloseCreateDiagramModal() // Phương thức đóng modal tạo sơ đồ
    {
        isCreateDiagramModalVisible = false;
        newDiagramName = string.Empty;
    }

    private async Task CreateDiagram() // Phương thức tạo sơ đồ mới
    {
        if (string.IsNullOrWhiteSpace(newDiagramName))
        {
            Console.WriteLine("Tên sơ đồ không được để trống.");
            return;
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("diagramManager.addTable", newDiagramName); // Gọi JavaScript để tạo sơ đồ mới
            Console.WriteLine($"Sơ đồ mới được tạo: {newDiagramName}");

            CloseCreateDiagramModal(); // Đóng modal sau khi tạo sơ đồ
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tạo sơ đồ: {ex.Message}"); // Xử lý lỗi
        }
    }

    private async Task ShowTableDetails(TableInfo table) // Phương thức hiển thị chi tiết bảng
    {
        tableColumns = await TableService.GetColumnsAsync(selectedDatabase, table.Schema, table.Name); // Lấy danh sách cột của bảng hiện tại
        isTableDetailsVisible = true;
    }

    private void CloseTableDetails() // Phương thức đóng modal chi tiết bảng
    {
        isTableDetailsVisible = false;
    }

    private async Task OnDragStart(DragEventArgs e, string tableName) // Phương thức xử lý khi kéo bảng vào sơ đồ
    {
        if (string.IsNullOrEmpty(tableName))
        {
            Console.WriteLine("Tên bảng không hợp lệ.");
            return;
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("diagramManager.addTable", tableName); // Thêm bảng vào sơ đồ

            var connections = await GetTableConnections(); // Lấy lại danh sách quan hệ sau khi thêm bảng

            await JSRuntime.InvokeVoidAsync("diagramManager.drawConnections", connections); // Cập nhật quan hệ trên sơ đồ
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi kéo bảng vào sơ đồ: {ex.Message}"); // Xử lý lỗi
        }
    }

    private async Task SaveDiagram() // Phương thức lưu sơ đồ
    {
        try
        {
            var diagramData = await JSRuntime.InvokeAsync<DiagramData>("diagramManager.getDiagramData"); // Lấy dữ liệu sơ đồ từ JavaScript
            Console.WriteLine($"Lưu sơ đồ: {diagramData}");
            // Lưu sơ đồ vào cơ sở dữ liệu
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi lưu sơ đồ: {ex.Message}"); // Xử lý lỗi
        }
    }

    private async Task ExportDiagramAsImage() // Phương thức xuất sơ đồ thành ảnh
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("diagramManager.exportAsImage"); // Gọi JavaScript để xuất sơ đồ
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xuất sơ đồ: {ex.Message}"); // Xử lý lỗi
        }
    }

    private async Task<List<TableConnection>> GetTableConnections() // Phương thức lấy danh sách quan hệ giữa các bảng
    {
        var connections = new List<TableConnection>();

        foreach (var table in tables)
        {
            var columns = await TableService.GetColumnsAsync(selectedDatabase, table.Schema, table.Name); // Lấy danh sách cột của bảng hiện tại

            foreach (var column in columns)
            {
                if (column.IsForeignKey && !string.IsNullOrEmpty(column.ForeignKeyTable))
                {
                    connections.Add(new TableConnection
                    {
                        SourceTable = table.Name, // Tên bảng nguồn
                        TargetTable = column.ForeignKeyTable, // Tên bảng đích (bảng liên kết)
                        ForeignKeyColumn = column.Name // Tên cột khóa ngoại
                    });
                }
            }
        }

        return connections;
    }

    public class DiagramData // Lớp chứa dữ liệu sơ đồ
    {
        public List<ElementData> Elements { get; set; } = new(); // Danh sách các phần tử trong sơ đồ
        public List<ConnectionData> Connections { get; set; } = new(); // Danh sách các kết nối trong sơ đồ
    }

    public class ElementData // Lớp chứa thông tin phần tử trong sơ đồ
    {
        public string Id { get; set; } // ID của phần tử
        public Position Position { get; set; } // Vị trí của phần tử
    }


        public class ConnectionData
        {
            public string Source { get; set; }
            public string Target { get; set; }
        }

        public class Position // Lớp chứa thông tin vị trí của phần tử trong sơ đồ
    {
        public int Top { get; set; } // Vị trí trên (theo trục Y)
        public int Left { get; set; } // Vị trí trái (theo trục X)
    }

    public class TableConnection // Lớp chứa thông tin kết nối giữa các bảng
    {
        public string SourceTable { get; set; } // Tên bảng nguồn
        public string TargetTable { get; set; } // Tên bảng đích (bảng liên kết)
        public string ForeignKeyColumn { get; set; } // Tên cột khóa ngoại
    }


}

<style>
    .diagram-canvas {
        position: relative;
        width: 100%;
        height: 500px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        overflow: auto;
        z-index: 1;
    }

    .table-container {
        display: grid; /* Sử dụng Grid Layout */
        grid-template-columns: repeat(4, 1fr); /* Chia thành 4 cột cố định */
        gap: 20px; /* Khoảng cách giữa các items */
        padding: 10px; /* Khoảng cách bên trong container */
        background-color: #f9f9f9;
        border: 1px solid #ccc;
    }

    .table-item {
        display: flex; /* Dùng Flexbox để căn chỉnh nội dung bên trong */
        flex-direction: column; /* Đặt nội dung theo chiều dọc */
        justify-content: center; /* Căn giữa nội dung theo chiều ngang */
        align-items: center; /* Căn giữa nội dung theo chiều dọc */
        padding: 10px;
        background-color: #fff;
        border: 1px solid #ccc;
        cursor: grab;
        user-select: none;
        height: 80px; /* Chiều cao cố định cho item */
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1); /* Hiệu ứng đổ bóng */
    }

    .connection-line {
        position: absolute;
        z-index: 4; /* Đảm bảo các đường kết nối nằm trên sơ đồ */
    }
</style>
