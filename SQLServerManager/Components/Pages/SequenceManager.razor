@page "/sequence-manager"
@using DatabaseSynchronizer.Services
@inject IJSRuntime JSRuntime
@inject DatabaseService DatabaseService
@inject SequenceService SequenceService

<h3>Quản Lý Sequence</h3>
<div class="row-cols-3">
    <div class="col-2">
        <label for="databaseSelect">Chọn Cơ Sở Dữ Liệu:</label>
        <select class="form-control" @bind="selectedDatabase">
            <option>vui long chon database</option>

            @foreach (var db in databases)
            {
                <option value="@db">@db</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="LoadSequences">Tải Sequences</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert @(IsSuccess ? "alert-success" : "alert-danger")">
        @StatusMessage
    </div>
}

<h4>Danh Sách Sequences:</h4>
<table class="table">
    <thead>
        <tr>
            <th>Tên Sequence</th>
            <th>Giá Trị Bắt Đầu</th>
            <th>Giá Trị Tăng</th>
            <th>Thao Tác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sequence in sequences)
        {
            <tr>
                <td>@sequence.Name</td>
                <td>@sequence.StartValue</td>
                <td>@sequence.IncrementValue</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditSequence(sequence)">Sửa</button>
                    <button class="btn btn-danger" @onclick="() => DropSequence(sequence)">Xóa</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Nút để mở modal -->
<button class="btn btn-secondary" @onclick="() => isAddingSequence = true">
    Thêm Sequence
</button>

<!-- Modal -->
<div class="modal @(isAddingSequence ? "show" : "")" style="display: @(isAddingSequence ? "block" : "none")" tabindex="-1" role="dialog" aria-hidden="@(isAddingSequence ? "false" : "true")">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Thêm Sequence</h5>
                <button type="button" class="close" @onclick="() => isAddingSequence = false" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
                <input type="text" class="form-control" @bind="newSequenceName" placeholder="Tên Sequence" />
                <div class="form-group">
                    <label for="startValue">Giá trị bắt đầu</label>
                    <input type="number" id="startValue" class="form-control" @bind="startValue" placeholder="Giá trị bắt đầu" min="1" />
                </div>

                <div class="form-group">
                    <label for="incrementValue">Giá trị tăng</label>
                    <input type="number" id="incrementValue" class="form-control" @bind="incrementValue" placeholder="Giá trị tăng" min="1" />
                </div>

            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="() => isAddingSequence = false">Hủy</button>
                <button class="btn btn-success" @onclick="CreateSequence">Tạo Sequence</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal Sửa Sequence -->
@if (isEditingSequence)
{
    <div class="modal show" style="display: block;" tabindex="-1" role="dialog" aria-hidden="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sửa Sequence</h5>
                    <button type="button" class="close" @onclick="() => isEditingSequence = false" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" @bind="selectedSequence.Name" placeholder="Tên Sequence" />
                    <div class="form-group">
                        <label for="startValue">Giá trị bắt đầu</label>
                        <input type="number" id="startValue" class="form-control" @bind="selectedSequence.StartValue" placeholder="Giá trị bắt đầu" min="1" />
                    </div>

                    <div class="form-group">
                        <label for="incrementValue">Giá trị tăng</label>
                        <input type="number" id="incrementValue" class="form-control" @bind="selectedSequence.IncrementValue" placeholder="Giá trị tăng" min="1" />
                    </div>

                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => isEditingSequence = false">Hủy</button>
                    <button class="btn btn-success" @onclick="UpdateSequence">Cập Nhật</button>
                </div>
            </div>
        </div>
    </div>
}


@if (currentValue.HasValue)
{
    <p>Giá trị hiện tại: @currentValue</p>
}
@code {
    private string selectedDatabase { get; set; }
    private List<string> databases = new List<string>();
    private List<Sequence> sequences = new List<Sequence>();
    private string newSequenceName;
    private long startValue;
    private long incrementValue;
    private long? currentValue; // Thay đổi từ int? sang long?
    private string StatusMessage { get; set; }
    private bool IsSuccess { get; set; }
    private bool isEditing = false;
    private Sequence selectedSequence = new Sequence();

    
    private bool isEditingSequence = false; // Biến để theo dõi trạng thái hiển thị bảng sửa sequence

    private bool isAddingSequence = false; // Biến để theo dõi trạng thái hiển thị bảng thêm sequence

    protected override async Task OnInitializedAsync()
    {
        try
        {
            databases = DatabaseService.GetDatabases();
            // if (databases.Any())
            // {
            //     selectedDatabase = databases.First();
            // }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Lỗi: {ex.Message}";
            IsSuccess = false;
        }
    }


    private async Task LoadSequences() // Phương thức bất đồng bộ để tải danh sách các sequence
    {
        try
        {
            if (!string.IsNullOrEmpty(selectedDatabase)) // Kiểm tra nếu có cơ sở dữ liệu được chọn
            {
                var serviceSequences = await SequenceService.GetSequencesAsync(selectedDatabase); // Lấy danh sách các sequence từ dịch vụ
                sequences = serviceSequences.Select(seq => new Sequence // Ngôn ngữ LINQ để chuyển đổi danh sách sequence thành đối tượng Sequence
                    {
                        Name = seq.Name, // Tên sequence
                        StartValue = seq.StartValue, // Giá trị bắt đầu của sequence
                        IncrementValue = seq.IncrementValue // Giá trị tăng của sequence
                    }).ToList();

                // Ghi log danh sách sequences mới
                Console.WriteLine("Danh sách sequences mới:");
                foreach (var seq in sequences) // Duyệt qua từng sequence trong danh sách
                {
                    Console.WriteLine($"Tên: {seq.Name}, Bắt đầu: {seq.StartValue}, Tăng: {seq.IncrementValue}"); // Ghi log thông tin của từng sequence
                }

                await GetCurrentValue(); // Lấy giá trị hiện tại của sequence
            }
        }
        catch (Exception ex) // Bắt lỗi nếu có ngoại lệ xảy ra
        {
            StatusMessage = $"Lỗi khi tải sequences: {ex.Message}"; // Ghi thông báo lỗi vào StatusMessage
            IsSuccess = false; // Đặt IsSuccess thành false
        }
    }
    private async Task SaveSequence() // Phương thức bất đồng bộ để lưu hoặc tạo sequence mới
    {
        if (!string.IsNullOrWhiteSpace(newSequenceName)) // Kiểm tra nếu tên sequence mới không rỗng hoặc chỉ chứa khoảng trắng
        {
            try
            {
                if (isEditing) // Kiểm tra nếu đang trong chế độ chỉnh sửa sequence
                {
                    await SequenceService.ReplaceSequenceAsync(
                        selectedDatabase,
                        sequences.First(seq => seq.Name == newSequenceName).Name, // Tìm sequence cũ theo tên
                        newSequenceName,
                        startValue,
                        incrementValue
                    );
                    Console.WriteLine($"Đã cập nhật sequence: {newSequenceName} với Bắt đầu: {startValue}, Tăng: {incrementValue}");
                    StatusMessage = "Cập nhật sequence thành công!";
                }
                else // Nếu không phải chế độ chỉnh sửa, thì tạo sequence mới
                {
                    await SequenceService.CreateSequenceAsync(
                        selectedDatabase,
                        newSequenceName,
                        startValue,
                        incrementValue
                    );
                    StatusMessage = "Tạo sequence thành công!";
                }
                IsSuccess = true;

                // Tải lại danh sách sequences
                await LoadSequences();
                ResetForm(); // Đặt lại form sau khi lưu sequence
            }
            catch (Exception ex) // Bắt lỗi nếu có ngoại lệ xảy ra
            {
                StatusMessage = $"Lỗi khi lưu sequence: {ex.Message}"; // Ghi thông báo lỗi vào StatusMessage
                IsSuccess = false; // Đặt IsSuccess thành false
            }
        }
    }


    private async Task DropSequence(Sequence sequence) // Phương thức bất đồng bộ để xóa sequence
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xóa sequence '{sequence.Name}'?"); // Hiển thị hộp thoại xác nhận xóa sequence
        if (confirm) // Nếu người dùng xác nhận
        {
            try
            {
                await SequenceService.DropSequenceAsync(selectedDatabase, sequence.Name); // Xóa sequence từ dịch vụ
                await LoadSequences(); // Tải lại danh sách sequences sau khi xóa
            }
            catch (Exception ex) // Bắt lỗi nếu có ngoại lệ xảy ra
            {
                StatusMessage = $"Lỗi khi xóa sequence: {ex.Message}"; // Ghi thông báo lỗi vào StatusMessage
                IsSuccess = false; // Đặt IsSuccess thành false
            }
        }
    }


    private void EditSequence(Sequence sequence) // Phương thức để chỉnh sửa sequence
    {
        if (sequence != null) // Kiểm tra nếu sequence không rỗng
        {
            selectedSequence = new Sequence // Tạo đối tượng Sequence mới từ sequence được truyền vào
                {
                    Name = sequence.Name, // Sao chép tên sequence
                    StartValue = sequence.StartValue, // Sao chép giá trị bắt đầu của sequence
                    IncrementValue = sequence.IncrementValue // Sao chép giá trị tăng của sequence
                };
            isEditingSequence = true; // Đặt cờ cho biết đang chỉnh sửa sequence
        }
    }



    private void ResetForm() // Phương thức đặt lại form nhập liệu
    {
        newSequenceName = string.Empty; // Đặt lại tên sequence mới về chuỗi rỗng
        startValue = 0; // Đặt lại giá trị bắt đầu về 0
        incrementValue = 0; // Đặt lại giá trị tăng về 0
    }

    private async Task GetCurrentValue() // Phương thức bất đồng bộ để lấy giá trị hiện tại của sequence
    {
        if (sequences.Count > 0) // Kiểm tra nếu danh sách sequences không rỗng
        {
            currentValue = await SequenceService.GetCurrentValueAsync(selectedDatabase, sequences[0].Name); // Lấy giá trị hiện tại của sequence đầu tiên trong danh sách từ dịch vụ
        }
    }

    public class Sequence // Định nghĩa lớp Sequence
    {
        public string Name { get; set; } // Tên sequence
        public long StartValue { get; set; } // Giá trị bắt đầu của sequence
        public long IncrementValue { get; set; } // Giá trị tăng của sequence
    }

    private async Task UpdateSequence() // Phương thức bất đồng bộ để cập nhật sequence
    {
        if (selectedSequence != null) // Kiểm tra nếu sequence được chọn không rỗng
        {
            try
            {
                await SequenceService.ReplaceSequenceAsync(
                    selectedDatabase,
                    selectedSequence.Name, // Tên sequence cũ
                    selectedSequence.Name, // Tên sequence mới (trong trường hợp này không đổi)
                    selectedSequence.StartValue, // Giá trị bắt đầu mới của sequence
                    selectedSequence.IncrementValue // Giá trị tăng mới của sequence
                );
                StatusMessage = "Cập nhật sequence thành công!"; // Thông báo trạng thái thành công
                IsSuccess = true; // Đặt cờ thành công

                await LoadSequences(); // Tải lại danh sách sequences
                selectedSequence = null; // Đặt lại sequence được chọn về null
            }
            catch (Exception ex) // Bắt lỗi nếu có ngoại lệ xảy ra
            {
                StatusMessage = $"Lỗi khi cập nhật sequence: {ex.Message}"; // Ghi thông báo lỗi vào StatusMessage
                IsSuccess = false; // Đặt cờ thất bại
            }
        }
        isEditingSequence = false; // Đặt cờ đang chỉnh sửa sequence về false
    }

    private async Task CreateSequence() // Phương thức bất đồng bộ để tạo sequence mới
    {
        if (!string.IsNullOrWhiteSpace(newSequenceName)) // Kiểm tra nếu tên sequence mới không rỗng hoặc chỉ chứa khoảng trắng
        {
            try
            {
                await SequenceService.CreateSequenceAsync(
                    selectedDatabase,
                    newSequenceName, // Tên sequence mới
                    startValue, // Giá trị bắt đầu của sequence
                    incrementValue // Giá trị tăng của sequence
                );
                StatusMessage = "Tạo sequence thành công!"; // Thông báo trạng thái thành công
                IsSuccess = true; // Đặt cờ thành công

                await LoadSequences(); // Tải lại danh sách sequences
                ResetForm(); // Đặt lại form sau khi tạo sequence
            }
            catch (Exception ex) // Bắt lỗi nếu có ngoại lệ xảy ra
            {
                StatusMessage = $"Lỗi khi tạo sequence: {ex.Message}"; // Ghi thông báo lỗi vào StatusMessage
                IsSuccess = false; // Đặt cờ thất bại
            }
        }
    }

}
