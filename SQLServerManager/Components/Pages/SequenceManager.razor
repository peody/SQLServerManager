@page "/sequence-manager"
@using DatabaseSynchronizer.Services
@inject IJSRuntime JSRuntime
@inject DatabaseService DatabaseService
@inject SequenceService SequenceService

<h3>Quản Lý Sequence</h3>
<div class="row-cols-3">
    <div class="col-2">
        <label for="databaseSelect">Chọn Cơ Sở Dữ Liệu:</label>
        <select class="form-control" @bind="selectedDatabase">
            @foreach (var db in databases)
            {
                <option value="@db">@db</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="LoadSequences">Tải Sequences</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert @(IsSuccess ? "alert-success" : "alert-danger")">
        @StatusMessage
    </div>
}

<h4>Danh Sách Sequences:</h4>
<table class="table">
    <thead>
        <tr>
            <th>Tên Sequence</th>
            <th>Giá Trị Bắt Đầu</th>
            <th>Giá Trị Tăng</th>
            <th>Thao Tác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sequence in sequences)
        {
            <tr>
                <td>@sequence.Name</td>
                <td>@sequence.StartValue</td>
                <td>@sequence.IncrementValue</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditSequence(sequence)">Sửa</button>
                    <button class="btn btn-danger" @onclick="() => DropSequence(sequence)">Xóa</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h4>Thêm Sequence:</h4>
<input type="text" class="form-control" @bind="newSequenceName" placeholder="Tên Sequence" />
<input type="number" class="form-control" @bind="startValue" placeholder="Giá trị bắt đầu" />
<input type="number" class="form-control" @bind="incrementValue" placeholder="Giá trị tăng" />
<button class="btn btn-success" @onclick="CreateSequence">Tạo Sequence</button>

<h4>Sửa Sequence:</h4>
<table class="table">
    <thead>
        <tr>
            <th>Tên Sequence</th>
            <th>Giá Trị Bắt Đầu</th>
            <th>Giá Trị Tăng</th>
            <th>Thao Tác</th>
        </tr>
    </thead>
    <tbody>
        @if (selectedSequence != null)
        {
            <tr>
                <td>
                    <input type="text" class="form-control" @bind="selectedSequence.Name" />
                </td>
                <td>
                    <input type="number" class="form-control" @bind="selectedSequence.StartValue" />
                </td>
                <td>
                    <input type="number" class="form-control" @bind="selectedSequence.IncrementValue" />
                </td>
                <td>
                    <button class="btn btn-success" @onclick="UpdateSequence">Cập Nhật</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (currentValue.HasValue)
{
    <p>Giá trị hiện tại: @currentValue</p>
}
@code {
    private string selectedDatabase { get; set; }
    private List<string> databases = new List<string>();
    private List<Sequence> sequences = new List<Sequence>();
    private string newSequenceName;
    private long startValue;
    private long incrementValue;
    private long? currentValue; // Thay đổi từ int? sang long?
    private string StatusMessage { get; set; }
    private bool IsSuccess { get; set; }
    private bool isEditing = false;
    private Sequence selectedSequence;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            databases = DatabaseService.GetDatabases();
            if (databases.Any())
            {
                selectedDatabase = databases.First();
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Lỗi: {ex.Message}";
            IsSuccess = false;
        }
    }

    private async Task LoadSequences()
    {
        try
        {
            if (!string.IsNullOrEmpty(selectedDatabase))
            {
                var serviceSequences = await SequenceService.GetSequencesAsync(selectedDatabase);
                sequences = serviceSequences.Select(seq => new Sequence
                    {
                        Name = seq.Name,
                        StartValue = seq.StartValue,
                        IncrementValue = seq.IncrementValue
                    }).ToList();

                // Ghi log danh sách sequences mới
                Console.WriteLine("Danh sách sequences mới:");
                foreach (var seq in sequences)
                {
                    Console.WriteLine($"Tên: {seq.Name}, Bắt đầu: {seq.StartValue}, Tăng: {seq.IncrementValue}");
                }

                await GetCurrentValue();
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Lỗi khi tải sequences: {ex.Message}";
            IsSuccess = false;
        }
    }


    string username = Environment.UserName; // Lấy tên người dùng hiện tại
    string domainAndUsername = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

    private async Task SaveSequence()
    {
        if (!string.IsNullOrWhiteSpace(newSequenceName))
        {
            try
            {
                if (isEditing)
                {
                    await SequenceService.ReplaceSequenceAsync(selectedDatabase, sequences.First(seq => seq.Name == newSequenceName).Name, newSequenceName, startValue, incrementValue);
                    Console.WriteLine($"Đã cập nhật sequence: {newSequenceName} với Bắt đầu: {startValue}, Tăng: {incrementValue}");
                    StatusMessage = "Cập nhật sequence thành công!";
                }

                else
                {
                    await SequenceService.CreateSequenceAsync(selectedDatabase, newSequenceName, startValue, incrementValue);
                    StatusMessage = "Tạo sequence thành công!";
                }
                IsSuccess = true;

                // Tải lại danh sách sequences
                await LoadSequences();
                ResetForm();
            }
            catch (Exception ex)
            {
                StatusMessage = $"Lỗi khi lưu sequence: {ex.Message}";
                IsSuccess = false;
            }
        }
    }

    private async Task DropSequence(Sequence sequence)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xóa sequence '{sequence.Name}'?");
        if (confirm)
        {
            try
            {
                await SequenceService.DropSequenceAsync(selectedDatabase, sequence.Name);
                await LoadSequences();
            }
            catch (Exception ex)
            {
                StatusMessage = $"Lỗi khi xóa sequence: {ex.Message}";
                IsSuccess = false;
            }
        }
    }

    private void EditSequence(Sequence sequence)
    {
        selectedSequence = new Sequence
            {
                Name = sequence.Name,
                StartValue = sequence.StartValue,
                IncrementValue = sequence.IncrementValue
            };
    }

    private void ResetForm()
    {
        newSequenceName = string.Empty;
        startValue = 0;
        incrementValue = 0;
    }

    private async Task GetCurrentValue()
    {
        if (sequences.Count > 0)
        {
            currentValue = await SequenceService.GetCurrentValueAsync(selectedDatabase, sequences[0].Name);
        }
    }

    public class Sequence
    {
        public string Name { get; set; }
        public long StartValue { get; set; }
        public long IncrementValue { get; set; }
    }
    private async Task UpdateSequence()
    {
        if (selectedSequence != null)
        {
            try
            {
                await SequenceService.ReplaceSequenceAsync(selectedDatabase, selectedSequence.Name, selectedSequence.Name, selectedSequence.StartValue, selectedSequence.IncrementValue);
                StatusMessage = "Cập nhật sequence thành công!";
                IsSuccess = true;

                // Tải lại danh sách sequences
                await LoadSequences();
                selectedSequence = null;
            }
            catch (Exception ex)
            {
                StatusMessage = $"Lỗi khi cập nhật sequence: {ex.Message}";
                IsSuccess = false;
            }
        }
    }
    private async Task CreateSequence()
    {
        if (!string.IsNullOrWhiteSpace(newSequenceName))
        {
            try
            {
                await SequenceService.CreateSequenceAsync(selectedDatabase, newSequenceName, startValue, incrementValue);
                StatusMessage = "Tạo sequence thành công!";
                IsSuccess = true;

                // Tải lại danh sách sequences
                await LoadSequences();
                ResetForm();
            }
            catch (Exception ex)
            {
                StatusMessage = $"Lỗi khi tạo sequence: {ex.Message}";
                IsSuccess = false;
            }
        }
    }
}
